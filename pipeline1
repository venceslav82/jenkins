pipeline 
{
  environment
  {
    DOCKERHUB_CREDENTIALS=credentials('docker-hub-id')
    MYSQL_ROOT_PASSWORD='ExamPa$$w0rd'
    DO_NETWORK="app-net"
  }
    agent 
    {
        label 'containers'
    }
    stages 
    {
        stage('Clone') 
        {
            steps 
            {
                git branch: 'main', url: 'http://192.168.56.102:3000/vdimitrov/bgapp'
            }
        }
    stage('Build images')
    {
      steps
      {
        sh 'docker image rm img-client || echo "Image img-client did not exist, nothing to remove."'
        sh 'cd client ; docker image build -t img-client .'

        sh 'docker image rm img-generator || echo "Image img-generator did not exist, nothing to remove."'
        sh 'cd generator ; docker image build -t img-generator .'

        sh 'docker image rm img-storage || echo "Image img-storage did not exist, nothing to remove."'
        sh 'cd storage ; docker image build -t img-storage .'
      }
    }

    stage('Create docker network $DO_NETWORK')
    {
      steps
      {
        sh 'docker network inspect $DO_NETWORK >/dev/null 2>&1 || docker network create $DO_NETWORK'
      }
    }

    stage('Deploy app on Dev')
    {
      steps
      {
        sh 'docker container rm -f con-storage || true'
        sh 'docker container run -d --name con-storage --net $DO_NETWORK -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD img-storage'

        sh 'docker container rm -f con-generator || true'
        sh 'docker container run -d --name con-generator --net $DO_NETWORK img-generator'

        sh 'docker container rm -f con-client || true'
        sh 'docker container run -d --name con-client --net $DO_NETWORK -p 8080:5000 img-client'
      }
    }
        
    stage('Publishing images to Docker Hub')
    {
      steps
      {
        sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'

        sh 'docker image rm venceslav82/img-client || true'
        sh 'docker image tag img-client venceslav82/img-client'
        sh 'docker push venceslav82/img-client'

        sh 'docker image rm venceslav82/img-generator || true'
        sh 'docker image tag img-generator venceslav82/img-generator'
        sh 'docker push venceslav82/img-generator'

        sh 'docker image rm venceslav82/img-storage || true'
        sh 'docker image tag img-storage venceslav82/img-storage'
        sh 'docker push venceslav82/img-storage'
      }
    }

    stage('Deploy to Prod')
    {
      steps
      {
        sh 'docker container rm -f con-storage || true'
        sh 'docker image rm -f venceslav82/img-storag || true'
        sh 'docker container run -d --name con-storage --net $DO_NETWORK -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD venceslav82/img-storag'

        sh 'docker container rm -f con-generator || true'
        sh 'docker image rm -f venceslav82/img-generator || true'
        sh 'docker container run -d --name con-generator --net $DO_NETWORK venceslav82/img-generator'

        sh 'docker container rm -f con-client || true'
        sh 'docker image rm -f ivelin1936/img-client || true'
        sh 'docker container run -d --name con-client --net $DO_NETWORK -p 80:5000 venceslav82/img-client'
      }
    }

        stage('CleanUp')
        {
            steps
            {
                cleanWs()
            }
        }
    }
}